
(fast-lock-cache-data 2 (quote (16947 . 26519)) (quote (t (c-font-lock-complex-decl-prepare (0 font-lock-keyword-face)) ("\\(\\=\\|\\(\\=\\|[^\\]\\)[
]\\)\\s *#\\s *\\(error\\|warning\\)\\>\\s *\\(.*\\)$" (4 font-lock-string-face)) ("\\(\\=\\|\\(\\=\\|[^\\]\\)[
]\\)\\s *#\\s *\\(import\\|include\\)\\>[ 	
]*\\(\\(/\\(/[^
]*[
]\\|\\*\\([^*
]\\|\\*[^/
]\\)*\\*/\\)\\|\\\\[
]\\)[ 	
]*\\)*\\(<[^>
]*>?\\)" (8 font-lock-string-face) (#<compiled-function (limit) "...(50)" [c->-as-paren-syntax c-<-as-paren-syntax ext beg-pos end-pos pos 8 ?> c-put-char-property-fun syntax-table extent-at nil delete-extent] 5>)) (#<compiled-function (limit) "...(153)" [parse-sexp-lookup-properties limit -match-end-pos- face start end nil boundp re-search-forward "\\(\\=\\|\\(\\=\\|[^\\]\\)[
]\\)\\s *#\\s *define\\>[ 	
]*\\(\\(/\\(/[^
]*[
]\\|\\*\\([^*
]\\|\\*[^/
]\\)*\\*/\\)\\|\\\\[
]\\)[ 	
]*\\)*\\([a-zA-Z_][a-zA-Z0-9_$]*\\)\\(\\((\\)\\|\\([^(]\\|$\\)\\)" t 0 c-skip-comments-and-strings match-data ((store-match-data match-data)) 9 7 font-lock-function-name-face put-nonduplicable-text-property font-lock c-forward-sws looking-at font-lock-variable-name-face ?\, match-data c-symbol-key] 5> (0 nil)) (#<compiled-function (limit) "...(79)" [parse-sexp-lookup-properties face start end -match-end-pos- limit nil boundp re-search-forward "\\(\\=\\|\\(\\=\\|[^\\]\\)[
]\\)\\s *#\\s *\\(if\\|elif\\)\\>\\(\\\\\\(.\\|[
]\\)\\|[^
]\\)*" t 0 c-skip-comments-and-strings 3 match-data ((store-match-data match-data)) "\\<\\(defined\\)\\>\\s *(?" move 1 put-nonduplicable-text-property font-lock match-data c-preprocessor-face-name] 5> (0 nil)) (#<compiled-function (limit) "...(62)" [parse-sexp-lookup-properties face limit start end -match-end-pos- nil boundp re-search-forward "\\(\\=\\|\\(\\=\\|[^\\]\\)[
]\\)\\(\\s *#\\s *[a-zA-Z0-9_$]+\\)" t 0 c-skip-comments-and-strings match-data ((store-match-data match-data)) 3 put-nonduplicable-text-property font-lock match-data c-preprocessor-face-name] 5> (0 nil)) ("Â " (0 c-nonbreakable-space-face)) (#<compiled-function (limit) "...(41)" [match-data parse-sexp-lookup-properties limit -match-end-pos- nil boundp re-search-forward ".\\(\\s\"\\|\\s|\\)" t 0 c-skip-comments-and-strings match-data ((store-match-data match-data)) c-font-lock-invalid-string] 4> (0 font-lock-keyword-face)) ("\\<\\(NULL\\|false\\|true\\)\\>" (1 font-lock-constant-face)) ("\\<\\(__\\(?:a\\(?:sm__\\|ttribute__\\)\\|declspec\\)\\|a\\(?:sm\\|uto\\)\\|break\\|c\\(?:ase\\|on\\(?:st\\|tinue\\)\\)\\|d\\(?:efault\\|o\\)\\|e\\(?:lse\\|num\\|xtern\\)\\|for\\|goto\\|i\\(?:f\\|nline\\)\\|re\\(?:gister\\|strict\\|turn\\)\\|s\\(?:izeof\\|t\\(?:atic\\|ruct\\)\\|witch\\)\\|typedef\\|union\\|volatile\\|while\\)\\([^a-zA-Z0-9_$]\\|$\\)" (1 font-lock-keyword-face)) (c-font-lock-declarations (0 font-lock-keyword-face)) ("\\<\\(_\\(?:Bool\\|Complex\\|Imaginary\\)\\|char\\|double\\|float\\|int\\|long\\|s\\(?:hort\\|igned\\)\\|unsigned\\|void\\)\\>" (1 (quote font-lock-type-face))) (#<compiled-function (limit) "...(49)" [c-specifier-key c-record-type-identifiers c-record-ref-identifiers c-promote-possible-types parse-sexp-lookup-properties limit t nil boundp re-search-forward "\\<\\(enum\\|struct\\|union\\)\\>" c-skip-comments-and-strings c-forward-sws looking-at c-forward-keyword-clause c-forward-type c-fontify-recorded-types-and-refs] 5> (0 nil)) (#<compiled-function (limit) "...(59)" [match-data parse-sexp-lookup-properties limit -match-end-pos- nil boundp re-search-forward "}[ 	]*\\(/\\*\\([^*
]\\|\\*[^/
]\\)*\\*/[ 	]*\\)*\\(\\([*(]\\|\\(const\\|restrict\\|volatile\\)\\>\\)\\([^=]\\|$\\)\\|[a-zA-Z_][a-zA-Z0-9_$]*\\)" t 0 c-skip-comments-and-strings c-put-char-property-fun c-type c-decl-id-start 3 match-data ((store-match-data match-data)) c-font-lock-declarators] 4> (0 nil)) (#<compiled-function (limit) "...(68)" [match-data match-data parse-sexp-lookup-properties limit -match-end-pos- nil boundp re-search-forward "\\<\\(enum\\)\\>[^][{}();,/#=]*{" t 0 c-skip-comments-and-strings match-data ((store-match-data match-data)) c-put-char-property-fun c-type c-decl-id-start c-forward-sws ((store-match-data match-data)) c-font-lock-declarators] 4> (0 nil)) ("\\<\\(goto\\)\\>\\s *\\([a-zA-Z_][a-zA-Z0-9_$]*\\)" (2 font-lock-constant-face nil t)) (c-font-lock-labels (0 font-lock-keyword-face)))) (quote ((font-lock-type-face 11409 11417 11320 11328 11276 11284 11235 11243 11133 11141 11043 11051 10937 10945 3164 3179 3141 3145 3110 3125 3084 3089 3077 3083 3063 3068 3054 3062 3035 3050 1229 1233 1206 1214 1186 1202) (font-lock-keyword-face 3157 3163 3134 3140 3103 3109 3028 3034 1244 1257 1222 1228 1179 1185) (font-lock-string-face 961 973 939 951 913 929 888 903 864 878 841 854 815 831) (font-lock-variable-name-face 12565 12585 12530 12554 12387 12402 12147 12159 12103 12118 12042 12056 11980 11997 11917 11934 11853 11869 11789 11803 11760 11775 11728 11745 11697 11713 11660 11679 11596 11616 11541 11559 11379 11406 11301 11317 11262 11273 11221 11232 11191 11202 11165 11179 11119 11130 11026 11040 10920 10934 10679 10694 10570 10586 10454 10472 10332 10350 10214 10229 10029 10038 9811 9820 9782 9794 9752 9766 9723 9736 9670 9687 9570 9588 9510 9532 3182 3187 3148 3154 3127 3131 3091 3100 3070 3074 1365 1381 1235 1240 1215 1219 711 728 691 700 675 681) (font-lock-preprocessor-face 12557 12564 12522 12529 12379 12386 12139 12146 12095 12102 12034 12041 11972 11979 11909 11916 11845 11852 11781 11788 11752 11759 11720 11727 11689 11696 11652 11659 11588 11595 11533 11540 11371 11378 11293 11300 11254 11261 11213 11220 11206 11212 11183 11190 11157 11164 11151 11156 11111 11118 11018 11025 11004 11007 10912 10919 10671 10678 10562 10569 10446 10453 10324 10331 10206 10213 10021 10028 9803 9810 9774 9781 9744 9751 9715 9722 9662 9669 9562 9569 9502 9509 1357 1364 952 960 930 938 904 912 879 887 855 863 832 840 806 814 781 787 703 710 683 690 667 674 652 659) (font-lock-comment-face 12406 12520 12164 12378 12062 12093 12005 12033 11872 11908 11810 11844 11620 11651 11572 11587 11427 11531 11337 11369 11061 11110 10954 11003 10745 10910 10595 10670 10475 10559 10353 10443 10233 10322 10042 10204 9823 10019 9693 9714 9594 9661 9536 9561 9426 9501 1427 3027 1385 1425 1278 1356 975 1178 732 780 1 651))))
